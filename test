#!/bin/bash

echo "=== Virtual Memory Overcommit Thread Test ==="
echo "Blog reference: [ADD YOUR BLOG URL HERE]"
echo "Date: $(date)"
echo "System: $(uname -a)"
echo

# Save original settings
ORIG_OVERCOMMIT_MEMORY=$(cat /proc/sys/vm/overcommit_memory)
ORIG_OVERCOMMIT_RATIO=$(cat /proc/sys/vm/overcommit_ratio)

echo "Original settings:"
echo "overcommit_memory: $ORIG_OVERCOMMIT_MEMORY"
echo "overcommit_ratio: $ORIG_OVERCOMMIT_RATIO"
echo

# Function to restore settings
restore_settings() {
    echo "Restoring original settings..."
    echo $ORIG_OVERCOMMIT_MEMORY | sudo tee /proc/sys/vm/overcommit_memory > /dev/null
    echo $ORIG_OVERCOMMIT_RATIO | sudo tee /proc/sys/vm/overcommit_ratio > /dev/null
}

# Trap to restore on exit
trap restore_settings EXIT

# Test 1: Default settings
echo "=== Test 1: Current Settings ==="
./monitor
echo

# Test with restrictive overcommit settings
echo "=== Test 2: Restrictive Overcommit (ratio=10) ==="
echo "Setting overcommit_memory=2 (strict accounting)"
echo "Setting overcommit_ratio=10 (very restrictive)"
sudo sysctl vm.overcommit_memory=2
sudo sysctl vm.overcommit_ratio=10

./monitor
echo

echo "Running C thread test..."
gcc -pthread -o thread_bomber thread_bomber.c
./thread_bomber 5000 &
CPID=$!

sleep 30
echo "Current state during C test:"
./monitor
kill $CPID 2>/dev/null
wait $CPID 2>/dev/null

echo -e "\n=== Test 3: Permissive Overcommit (ratio=75) ==="
echo "Setting overcommit_ratio=75 (more permissive)"
sudo sysctl vm.overcommit_ratio=75

./monitor
echo

echo "Running Java thread test..."
javac ThreadBomber.java
java ThreadBomber 3000 &
JPID=$!

sleep 30
echo "Current state during Java test:"
./monitor
kill $JPID 2>/dev/null
wait $JPID 2>/dev/null

echo "Running Python thread test..."
python3 thread_bomber.py 3000 &
PYPID=$!

sleep 30
echo "Current state during Python test:"
./monitor
kill $PYPID 2>/dev/null
wait $PYPID 2>/dev/null

echo -e "\n=== Test 4: Python ThreadPoolExecutor Test ==="
echo "Running Python ThreadPoolExecutor test..."
python3 thread_bomber_futures.py 2000 &
PYPID2=$!

sleep 30
echo "Current state during Python ThreadPoolExecutor test:"
./monitor
kill $PYPID2 2>/dev/null
wait $PYPID2 2>/dev/null

echo -e "\n=== Test 5: No Overcommit Limits (overcommit_memory=1) ==="
echo "Setting overcommit_memory=1 (always allow)"
sudo sysctl vm.overcommit_memory=1

./monitor
echo

echo "Running final C thread test..."
./thread_bomber 8000 &
CPID2=$!

sleep 30
echo "Final state:"
./monitor
kill $CPID2 2>/dev/null
wait $CPID2 2>/dev/null

echo -e "\n=== Test Summary ==="
echo "All tests completed. Check the output above for:"
echo "1. EAGAIN errors when overcommit limits are hit"
echo "2. Different behavior between C, Java, and Python thread creation"
echo "3. Virtual memory accounting vs physical memory usage"
echo "4. Impact of overcommit_memory and overcommit_ratio settings"
